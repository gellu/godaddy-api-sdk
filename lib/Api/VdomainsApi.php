<?php
/**
 * VdomainsApi
 * PHP version 5
 *
 * @category Class
 * @package  GoDaddyDomainsClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.8
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoDaddyDomainsClient\Api;

use \GoDaddyDomainsClient\Configuration;
use \GoDaddyDomainsClient\ApiClient;
use \GoDaddyDomainsClient\ApiException;
use \GoDaddyDomainsClient\ObjectSerializer;

/**
 * VdomainsApi Class Doc Comment
 *
 * @category Class
 * @package  GoDaddyDomainsClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VdomainsApi
{

    /**
     * API Client
     *
     * @var \GoDaddyDomainsClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \GoDaddyDomainsClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\GoDaddyDomainsClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.ote-godaddy.com/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \GoDaddyDomainsClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \GoDaddyDomainsClient\ApiClient $apiClient set the API client
     *
     * @return VdomainsApi
     */
    public function setApiClient(\GoDaddyDomainsClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation available
     *
     * Determine whether or not the specified domain is available for purchase
     *
     * @param string|array $domain Domain name or array of domain names whose availability is to be checked (required)
     * @param string $check_type Optimize for time (&#39;FAST&#39;) or accuracy (&#39;FULL&#39;) (optional, default to FAST)
     * @param bool $for_transfer Whether or not to include domains available for transfer (optional, default to false)
     * @param int $wait_ms Maximum amount of time, in milliseconds, to wait for responses If elapses, return the results compiled up to that point, some of which may not be authoritative (optional, default to 1000)
     * @return \GoDaddyDomainsClient\Model\DomainAvailableResponse|array of \GoDaddyDomainsClient\Model\DomainAvailableResponse
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function available($domain, $check_type = null, $for_transfer = null, $wait_ms = null)
    {
        list($response) = $this->availableWithHttpInfo($domain, $check_type, $for_transfer, $wait_ms);
        return $response;
    }

    /**
     * Operation availableWithHttpInfo
     *
     * Determine whether or not the specified domain is available for purchase
     *
     * @param string|array $domain Domain name or array of domain names whose availability is to be checked (required)
     * @param string $check_type Optimize for time (&#39;FAST&#39;) or accuracy (&#39;FULL&#39;) (optional, default to FAST)
     * @param bool $for_transfer Whether or not to include domains available for transfer (optional, default to false)
     * @param int $wait_ms Maximum amount of time, in milliseconds, to wait for responses If elapses, return the results compiled up to that point, some of which may not be authoritative (optional, default to 1000)
     * @return array of \GoDaddyDomainsClient\Model\DomainAvailableResponse|array of \GoDaddyDomainsClient\Model\DomainAvailableResponse , HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function availableWithHttpInfo($domain, $check_type = null, $for_transfer = null, $wait_ms = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling available');
        }
        // parse inputs
        $resourcePath = "/v1/domains/available";
        $httpBody = '';
	    $method = 'GET';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // query params
        if ($domain !== null) {
	        if (is_array($domain)) {
		        $httpBody .= json_encode($domain);
		        $method = 'POST';
	        } else {
		        $queryParams['domain'] = $this->apiClient->getSerializer()->toQueryValue($domain);
	        }
        }
        // query params
        if ($check_type !== null) {
            $queryParams['checkType'] = $this->apiClient->getSerializer()->toQueryValue($check_type);
        }
        // query params
        if ($for_transfer !== null) {
            $queryParams['forTransfer'] = $this->apiClient->getSerializer()->toQueryValue($for_transfer);
        }
        // query params
        if ($wait_ms !== null) {
            $queryParams['waitMs'] = $this->apiClient->getSerializer()->toQueryValue($wait_ms);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                $method,
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DomainAvailableResponse',
                '/v1/domains/available'
            );
            if (!empty($response->domains)) {
	            $objects = array();
	            foreach ( $response->domains as $domain ) {
		            $objects[] = $this->apiClient->getSerializer()->deserialize($domain, '\GoDaddyDomainsClient\Model\DomainAvailableResponse', $httpHeader);
	            }
            } else {
	            $objects = $this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DomainAvailableResponse', $httpHeader);
            }

	        return array( $objects, $statusCode, $httpHeader );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DomainAvailableResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation callList
     *
     * Retrieve a list of Domains for the specified Shopper
     *
     * @param string $x_shopper_id Shopper ID whose domains are to be retrieved (optional)
     * @param string[] $statuses Only include results with &#x60;status&#x60; value in the specified set (optional)
     * @param string[] $status_groups Only include results with &#x60;status&#x60; value in any of the specified groups (optional)
     * @param int $limit Maximum number of domains to return (optional)
     * @param string $marker Marker Domain to use as the offset in results (optional)
     * @param string[] $includes Optional details to be included in the response (optional)
     * @return \GoDaddyDomainsClient\Model\DomainSummary[]
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function callList($x_shopper_id = null, $statuses = null, $status_groups = null, $limit = null, $marker = null, $includes = null)
    {
        list($response) = $this->callListWithHttpInfo($x_shopper_id, $statuses, $status_groups, $limit, $marker, $includes);
        return $response;
    }

    /**
     * Operation callListWithHttpInfo
     *
     * Retrieve a list of Domains for the specified Shopper
     *
     * @param string $x_shopper_id Shopper ID whose domains are to be retrieved (optional)
     * @param string[] $statuses Only include results with &#x60;status&#x60; value in the specified set (optional)
     * @param string[] $status_groups Only include results with &#x60;status&#x60; value in any of the specified groups (optional)
     * @param int $limit Maximum number of domains to return (optional)
     * @param string $marker Marker Domain to use as the offset in results (optional)
     * @param string[] $includes Optional details to be included in the response (optional)
     * @return Array of \GoDaddyDomainsClient\Model\DomainSummary[], HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function callListWithHttpInfo($x_shopper_id = null, $statuses = null, $status_groups = null, $limit = null, $marker = null, $includes = null)
    {
        // parse inputs
        $resourcePath = "/v1/domains";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // query params
        if (is_array($statuses)) {
            $statuses = $this->apiClient->getSerializer()->serializeCollection($statuses, 'csv', true);
        }
        if ($statuses !== null) {
            $queryParams['statuses'] = $this->apiClient->getSerializer()->toQueryValue($statuses);
        }
        // query params
        if (is_array($status_groups)) {
            $status_groups = $this->apiClient->getSerializer()->serializeCollection($status_groups, 'csv', true);
        }
        if ($status_groups !== null) {
            $queryParams['statusGroups'] = $this->apiClient->getSerializer()->toQueryValue($status_groups);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($marker !== null) {
            $queryParams['marker'] = $this->apiClient->getSerializer()->toQueryValue($marker);
        }
        // query params
        if (is_array($includes)) {
            $includes = $this->apiClient->getSerializer()->serializeCollection($includes, 'csv', true);
        }
        if ($includes !== null) {
            $queryParams['includes'] = $this->apiClient->getSerializer()->toQueryValue($includes);
        }
        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DomainSummary[]',
                '/v1/domains'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DomainSummary[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DomainSummary[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancel
     *
     * Cancel a purchased domain
     *
     * @param string $domain Domain to cancel (required)
     * @return void
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function cancel($domain)
    {
        list($response) = $this->cancelWithHttpInfo($domain);
        return $response;
    }

    /**
     * Operation cancelWithHttpInfo
     *
     * Cancel a purchased domain
     *
     * @param string $domain Domain to cancel (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function cancelWithHttpInfo($domain)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling cancel');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation cancelPrivacy
     *
     * Submit a privacy cancellation request for the given domain
     *
     * @param string $domain Domain whose privacy is to be cancelled (required)
     * @param string $x_shopper_id Shopper ID of the owner of the domain (optional)
     * @return void
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function cancelPrivacy($domain, $x_shopper_id = null)
    {
        list($response) = $this->cancelPrivacyWithHttpInfo($domain, $x_shopper_id);
        return $response;
    }

    /**
     * Operation cancelPrivacyWithHttpInfo
     *
     * Submit a privacy cancellation request for the given domain
     *
     * @param string $domain Domain whose privacy is to be cancelled (required)
     * @param string $x_shopper_id Shopper ID of the owner of the domain (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function cancelPrivacyWithHttpInfo($domain, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling cancelPrivacy');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/privacy";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}/privacy'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation get
     *
     * Retrieve details for the specified Domain
     *
     * @param string $domain Domain name whose details are to be retrieved (required)
     * @param string $x_shopper_id Shopper ID expected to own the specified domain (optional)
     * @return \GoDaddyDomainsClient\Model\DomainDetail
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function get($domain, $x_shopper_id = null)
    {
        list($response) = $this->getWithHttpInfo($domain, $x_shopper_id);
        return $response;
    }

    /**
     * Operation getWithHttpInfo
     *
     * Retrieve details for the specified Domain
     *
     * @param string $domain Domain name whose details are to be retrieved (required)
     * @param string $x_shopper_id Shopper ID expected to own the specified domain (optional)
     * @return Array of \GoDaddyDomainsClient\Model\DomainDetail, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function getWithHttpInfo($domain, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling get');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DomainDetail',
                '/v1/domains/{domain}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DomainDetail', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DomainDetail', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAgreement
     *
     * Retrieve the legal agreement(s) required to purchase the specified TLD and add-ons
     *
     * @param string[] $tlds list of TLDs whose legal agreements are to be retrieved (required)
     * @param bool $privacy Whether or not privacy has been requested (required)
     * @param string $x_market_id Unique identifier of the Market used to retrieve/translate Legal Agreements (optional, default to en-US)
     * @param bool $for_transfer Whether or not domain tranfer has been requested (optional)
     * @return \GoDaddyDomainsClient\Model\LegalAgreement[]
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function getAgreement($tlds, $privacy, $x_market_id = null, $for_transfer = null)
    {
        list($response) = $this->getAgreementWithHttpInfo($tlds, $privacy, $x_market_id, $for_transfer);
        return $response;
    }

    /**
     * Operation getAgreementWithHttpInfo
     *
     * Retrieve the legal agreement(s) required to purchase the specified TLD and add-ons
     *
     * @param string[] $tlds list of TLDs whose legal agreements are to be retrieved (required)
     * @param bool $privacy Whether or not privacy has been requested (required)
     * @param string $x_market_id Unique identifier of the Market used to retrieve/translate Legal Agreements (optional, default to en-US)
     * @param bool $for_transfer Whether or not domain tranfer has been requested (optional)
     * @return Array of \GoDaddyDomainsClient\Model\LegalAgreement[], HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function getAgreementWithHttpInfo($tlds, $privacy, $x_market_id = null, $for_transfer = null)
    {
        // verify the required parameter 'tlds' is set
        if ($tlds === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tlds when calling getAgreement');
        }
        // verify the required parameter 'privacy' is set
        if ($privacy === null) {
            throw new \InvalidArgumentException('Missing the required parameter $privacy when calling getAgreement');
        }
        // parse inputs
        $resourcePath = "/v1/domains/agreements";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // query params
        if (is_array($tlds)) {
            $tlds = $this->apiClient->getSerializer()->serializeCollection($tlds, 'csv', true);
        }
        if ($tlds !== null) {
            $queryParams['tlds'] = $this->apiClient->getSerializer()->toQueryValue($tlds);
        }
        // query params
        if ($privacy !== null) {
            $queryParams['privacy'] = $this->apiClient->getSerializer()->toQueryValue($privacy);
        }
        // query params
        if ($for_transfer !== null) {
            $queryParams['forTransfer'] = $this->apiClient->getSerializer()->toQueryValue($for_transfer);
        }
        // header params
        if ($x_market_id !== null) {
            $headerParams['X-Market-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_market_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\LegalAgreement[]',
                '/v1/domains/agreements'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\LegalAgreement[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\LegalAgreement[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation identityDocumentsUpload
     *
     * Upload an identity document for Real Name Validation
     *
     * @param string $x_shopper_id Shopper for whom Domain is to be updated (required)
     * @param \GoDaddyDomainsClient\Model\IdentityDocumentCreate $body Identity document to create (required)
     * @return void
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function identityDocumentsUpload($x_shopper_id, $body)
    {
        list($response) = $this->identityDocumentsUploadWithHttpInfo($x_shopper_id, $body);
        return $response;
    }

    /**
     * Operation identityDocumentsUploadWithHttpInfo
     *
     * Upload an identity document for Real Name Validation
     *
     * @param string $x_shopper_id Shopper for whom Domain is to be updated (required)
     * @param \GoDaddyDomainsClient\Model\IdentityDocumentCreate $body Identity document to create (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function identityDocumentsUploadWithHttpInfo($x_shopper_id, $body)
    {
        // verify the required parameter 'x_shopper_id' is set
        if ($x_shopper_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_shopper_id when calling identityDocumentsUpload');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling identityDocumentsUpload');
        }
        // parse inputs
        $resourcePath = "/v1/domains/identityDocuments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/identityDocuments'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation purchase
     *
     * Purchase and register the specified Domain
     *
     * @param \GoDaddyDomainsClient\Model\DomainPurchase $body An instance document expected to match the JSON schema returned by &#x60;./schema/{tld}&#x60; (required)
     * @param string $x_shopper_id The Shopper for whom the domain should be purchased (optional)
     * @return \GoDaddyDomainsClient\Model\DomainPurchaseResponse
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function purchase($body, $x_shopper_id = null)
    {
        list($response) = $this->purchaseWithHttpInfo($body, $x_shopper_id);
        return $response;
    }

    /**
     * Operation purchaseWithHttpInfo
     *
     * Purchase and register the specified Domain
     *
     * @param \GoDaddyDomainsClient\Model\DomainPurchase $body An instance document expected to match the JSON schema returned by &#x60;./schema/{tld}&#x60; (required)
     * @param string $x_shopper_id The Shopper for whom the domain should be purchased (optional)
     * @return Array of \GoDaddyDomainsClient\Model\DomainPurchaseResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function purchaseWithHttpInfo($body, $x_shopper_id = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling purchase');
        }
        // parse inputs
        $resourcePath = "/v1/domains/purchase";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DomainPurchaseResponse',
                '/v1/domains/purchase'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DomainPurchaseResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DomainPurchaseResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation purchasePrivacy
     *
     * Purchase privacy for a specified domain
     *
     * @param string $domain Domain for which to purchase privacy (required)
     * @param \GoDaddyDomainsClient\Model\PrivacyPurchase $body Options for purchasing privacy (required)
     * @param string $x_shopper_id Shopper ID of the owner of the domain (optional)
     * @return \GoDaddyDomainsClient\Model\DomainPurchaseResponse
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function purchasePrivacy($domain, $body, $x_shopper_id = null)
    {
        list($response) = $this->purchasePrivacyWithHttpInfo($domain, $body, $x_shopper_id);
        return $response;
    }

    /**
     * Operation purchasePrivacyWithHttpInfo
     *
     * Purchase privacy for a specified domain
     *
     * @param string $domain Domain for which to purchase privacy (required)
     * @param \GoDaddyDomainsClient\Model\PrivacyPurchase $body Options for purchasing privacy (required)
     * @param string $x_shopper_id Shopper ID of the owner of the domain (optional)
     * @return Array of \GoDaddyDomainsClient\Model\DomainPurchaseResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function purchasePrivacyWithHttpInfo($domain, $body, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling purchasePrivacy');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling purchasePrivacy');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/privacy/purchase";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DomainPurchaseResponse',
                '/v1/domains/{domain}/privacy/purchase'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DomainPurchaseResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DomainPurchaseResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recordAdd
     *
     * Add the specified DNS Records to the specified Domain
     *
     * @param string $domain Domain whose DNS Records are to be augmented (required)
     * @param \GoDaddyDomainsClient\Model\DNSRecord[] $records DNS Records to add to whatever currently exists (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordAdd($domain, $records, $x_shopper_id = null)
    {
        list($response) = $this->recordAddWithHttpInfo($domain, $records, $x_shopper_id);
        return $response;
    }

    /**
     * Operation recordAddWithHttpInfo
     *
     * Add the specified DNS Records to the specified Domain
     *
     * @param string $domain Domain whose DNS Records are to be augmented (required)
     * @param \GoDaddyDomainsClient\Model\DNSRecord[] $records DNS Records to add to whatever currently exists (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordAddWithHttpInfo($domain, $records, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling recordAdd');
        }
        // verify the required parameter 'records' is set
        if ($records === null) {
            throw new \InvalidArgumentException('Missing the required parameter $records when calling recordAdd');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/records";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($records)) {
            $_tempBody = $records;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}/records'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recordGet
     *
     * Retrieve DNS Records for the specified Domain, optionally with the specified Type and/or Name
     *
     * @param string $domain Domain whose DNS Records are to be retrieved (required)
     * @param string $type DNS Record Type for which DNS Records are to be retrieved (required only if name is used)
     * @param string $name DNS Record Name for which DNS Records are to be retrieved (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @param int $offset Number of results to skip for pagination (optional)
     * @param int $limit Maximum number of items to return (optional)
     * @return \GoDaddyDomainsClient\Model\DNSRecord[]
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordGet($domain, $type = null, $name = null, $x_shopper_id = null, $offset = null, $limit = null)
    {
        list($response) = $this->recordGetWithHttpInfo($domain, $type, $name, $x_shopper_id, $offset, $limit);
        return $response;
    }

    /**
     * Operation recordGetWithHttpInfo
     *
     * Retrieve DNS Records for the specified Domain, optionally with the specified Type and/or Name
     *
     * @param string $domain Domain whose DNS Records are to be retrieved (required)
     * @param string $type DNS Record Type for which DNS Records are to be retrieved (required only if name is used)
     * @param string $name DNS Record Name for which DNS Records are to be retrieved (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @param int $offset Number of results to skip for pagination (optional)
     * @param int $limit Maximum number of items to return (optional)
     * @return Array of \GoDaddyDomainsClient\Model\DNSRecord[], HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordGetWithHttpInfo($domain, $type = null, $name = null, $x_shopper_id = null, $offset = null, $limit = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling recordGet');
        }
        // verify the required parameter 'type' is set
        if ($type === null && $name !== null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling recordGet');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/records/{type?}/{name?}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type?" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($type !== null && $name !== null) {
            $resourcePath = str_replace(
                "{" . "name?" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        $resourcePath = str_replace(["{type?}", "{name?}"], "", $resourcePath);
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DNSRecord[]',
                '/v1/domains/{domain}/records/{type?}/{name?}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DNSRecord[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DNSRecord[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recordReplace
     *
     * Replace all DNS Records for the specified Domain
     *
     * @param string $domain Domain whose DNS Records are to be replaced (required)
     * @param \GoDaddyDomainsClient\Model\DNSRecord[] $records DNS Records to replace whatever currently exists (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordReplace($domain, $records, $x_shopper_id = null)
    {
        list($response) = $this->recordReplaceWithHttpInfo($domain, $records, $x_shopper_id);
        return $response;
    }

    /**
     * Operation recordReplaceWithHttpInfo
     *
     * Replace all DNS Records for the specified Domain
     *
     * @param string $domain Domain whose DNS Records are to be replaced (required)
     * @param \GoDaddyDomainsClient\Model\DNSRecord[] $records DNS Records to replace whatever currently exists (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordReplaceWithHttpInfo($domain, $records, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling recordReplace');
        }
        // verify the required parameter 'records' is set
        if ($records === null) {
            throw new \InvalidArgumentException('Missing the required parameter $records when calling recordReplace');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/records";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($records)) {
            $_tempBody = $records;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}/records'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recordReplaceType
     *
     * Replace all DNS Records for the specified Domain with the specified Type
     *
     * @param string $domain Domain whose DNS Records are to be replaced (required)
     * @param string $type DNS Record Type for which DNS Records are to be replaced (required)
     * @param \GoDaddyDomainsClient\Model\DNSRecordCreateType[] $records DNS Records to replace whatever currently exists (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordReplaceType($domain, $type, $records, $x_shopper_id = null)
    {
        list($response) = $this->recordReplaceTypeWithHttpInfo($domain, $type, $records, $x_shopper_id);
        return $response;
    }

    /**
     * Operation recordReplaceTypeWithHttpInfo
     *
     * Replace all DNS Records for the specified Domain with the specified Type
     *
     * @param string $domain Domain whose DNS Records are to be replaced (required)
     * @param string $type DNS Record Type for which DNS Records are to be replaced (required)
     * @param \GoDaddyDomainsClient\Model\DNSRecordCreateType[] $records DNS Records to replace whatever currently exists (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordReplaceTypeWithHttpInfo($domain, $type, $records, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling recordReplaceType');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling recordReplaceType');
        }
        // verify the required parameter 'records' is set
        if ($records === null) {
            throw new \InvalidArgumentException('Missing the required parameter $records when calling recordReplaceType');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/records/{type}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($records)) {
            $_tempBody = $records;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}/records/{type}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation recordReplaceTypeName
     *
     * Replace all DNS Records for the specified Domain with the specified Type and Name
     *
     * @param string $domain Domain whose DNS Records are to be replaced (required)
     * @param string $type DNS Record Type for which DNS Records are to be replaced (required)
     * @param string $name DNS Record Name for which DNS Records are to be replaced (required)
     * @param \GoDaddyDomainsClient\Model\DNSRecordCreateTypeName[] $records DNS Records to replace whatever currently exists (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return void
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordReplaceTypeName($domain, $type, $name, $records, $x_shopper_id = null)
    {
        list($response) = $this->recordReplaceTypeNameWithHttpInfo($domain, $type, $name, $records, $x_shopper_id);
        return $response;
    }

    /**
     * Operation recordReplaceTypeNameWithHttpInfo
     *
     * Replace all DNS Records for the specified Domain with the specified Type and Name
     *
     * @param string $domain Domain whose DNS Records are to be replaced (required)
     * @param string $type DNS Record Type for which DNS Records are to be replaced (required)
     * @param string $name DNS Record Name for which DNS Records are to be replaced (required)
     * @param \GoDaddyDomainsClient\Model\DNSRecordCreateTypeName[] $records DNS Records to replace whatever currently exists (required)
     * @param string $x_shopper_id Shopper ID which owns the domain. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function recordReplaceTypeNameWithHttpInfo($domain, $type, $name, $records, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling recordReplaceTypeName');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling recordReplaceTypeName');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling recordReplaceTypeName');
        }
        // verify the required parameter 'records' is set
        if ($records === null) {
            throw new \InvalidArgumentException('Missing the required parameter $records when calling recordReplaceTypeName');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/records/{type}/{name}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($records)) {
            $_tempBody = $records;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}/records/{type}/{name}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation renew
     *
     * Renew the specified Domain
     *
     * @param string $domain Domain to renew (required)
     * @param string $x_shopper_id Shopper for whom Domain is to be renewed. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @param \GoDaddyDomainsClient\Model\DomainRenew $body Options for renewing existing Domain (optional)
     * @return \GoDaddyDomainsClient\Model\DomainPurchaseResponse
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function renew($domain, $x_shopper_id = null, $body = null)
    {
        list($response) = $this->renewWithHttpInfo($domain, $x_shopper_id, $body);
        return $response;
    }

    /**
     * Operation renewWithHttpInfo
     *
     * Renew the specified Domain
     *
     * @param string $domain Domain to renew (required)
     * @param string $x_shopper_id Shopper for whom Domain is to be renewed. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @param \GoDaddyDomainsClient\Model\DomainRenew $body Options for renewing existing Domain (optional)
     * @return Array of \GoDaddyDomainsClient\Model\DomainPurchaseResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function renewWithHttpInfo($domain, $x_shopper_id = null, $body = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling renew');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/renew";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DomainPurchaseResponse',
                '/v1/domains/{domain}/renew'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DomainPurchaseResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DomainPurchaseResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation schema
     *
     * Retrieve the schema to be submitted when registering a Domain for the specified TLD
     *
     * @param string $tld The Top-Level Domain whose schema should be retrieved (required)
     * @return \GoDaddyDomainsClient\Model\JsonSchema
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function schema($tld)
    {
        list($response) = $this->schemaWithHttpInfo($tld);
        return $response;
    }

    /**
     * Operation schemaWithHttpInfo
     *
     * Retrieve the schema to be submitted when registering a Domain for the specified TLD
     *
     * @param string $tld The Top-Level Domain whose schema should be retrieved (required)
     * @return Array of \GoDaddyDomainsClient\Model\JsonSchema, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function schemaWithHttpInfo($tld)
    {
        // verify the required parameter 'tld' is set
        if ($tld === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tld when calling schema');
        }
        // parse inputs
        $resourcePath = "/v1/domains/purchase/schema/{tld}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // path params
        if ($tld !== null) {
            $resourcePath = str_replace(
                "{" . "tld" . "}",
                $this->apiClient->getSerializer()->toPathValue($tld),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\JsonSchema',
                '/v1/domains/purchase/schema/{tld}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\JsonSchema', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\JsonSchema', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation suggest
     *
     * Suggest alternate Domain names based on a seed Domain or set of keywords
     *
     * @param string $query Domain name or set of keywords for which alternative domain names will be suggested (required)
     * @param string $x_shopper_id Shopper ID for which the suggestions are being generated (optional)
     * @param string $country Two-letter ISO country code to be used as a hint for target region&lt;br/&gt;&lt;br/&gt; NOTE: These are sample values, there are many &lt;a href&#x3D;\&quot;http://www.iso.org/iso/country_codes.htm\&quot;&gt;more&lt;/a&gt; (optional)
     * @param string $city Name of city to be used as a hint for target region (optional)
     * @param string[] $sources Sources to be queried&lt;br/&gt;&lt;br/&gt;&lt;ul&gt; &lt;li&gt;&lt;strong&gt;CC_TLD&lt;/strong&gt; - Varies the TLD using Country Codes&lt;/li&gt; &lt;li&gt;&lt;strong&gt;EXTENSION&lt;/strong&gt; - Varies the TLD&lt;/li&gt; &lt;li&gt;&lt;strong&gt;KEYWORD_SPIN&lt;/strong&gt; - Identifies keywords and then rotates each one&lt;/li&gt; &lt;li&gt;&lt;strong&gt;PREMIUM&lt;/strong&gt; - Includes variations with premium prices&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param string[] $tlds Top-level domains to be included in suggestions&lt;br/&gt;&lt;br/&gt; NOTE: These are sample values, there are many &lt;a href&#x3D;\&quot;http://www.godaddy.com/tlds/gtld.aspx#domain_search_form\&quot;&gt;more&lt;/a&gt; (optional)
     * @param int $length_max Maximum length of second-level domain (optional)
     * @param int $length_min Minimum length of second-level domain (optional)
     * @param int $limit Maximum number of suggestions to return (optional)
     * @param int $wait_ms Maximum amount of time, in milliseconds, to wait for responses If elapses, return the results compiled up to that point (optional, default to 1000)
     * @return \GoDaddyDomainsClient\Model\DomainSuggestion[]
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function suggest($query, $x_shopper_id = null, $country = null, $city = null, $sources = null, $tlds = null, $length_max = null, $length_min = null, $limit = null, $wait_ms = null)
    {
        list($response) = $this->suggestWithHttpInfo($query, $x_shopper_id, $country, $city, $sources, $tlds, $length_max, $length_min, $limit, $wait_ms);
        return $response;
    }

    /**
     * Operation suggestWithHttpInfo
     *
     * Suggest alternate Domain names based on a seed Domain or set of keywords
     *
     * @param string $query Domain name or set of keywords for which alternative domain names will be suggested (required)
     * @param string $x_shopper_id Shopper ID for which the suggestions are being generated (optional)
     * @param string $country Two-letter ISO country code to be used as a hint for target region&lt;br/&gt;&lt;br/&gt; NOTE: These are sample values, there are many &lt;a href&#x3D;\&quot;http://www.iso.org/iso/country_codes.htm\&quot;&gt;more&lt;/a&gt; (optional)
     * @param string $city Name of city to be used as a hint for target region (optional)
     * @param string[] $sources Sources to be queried&lt;br/&gt;&lt;br/&gt;&lt;ul&gt; &lt;li&gt;&lt;strong&gt;CC_TLD&lt;/strong&gt; - Varies the TLD using Country Codes&lt;/li&gt; &lt;li&gt;&lt;strong&gt;EXTENSION&lt;/strong&gt; - Varies the TLD&lt;/li&gt; &lt;li&gt;&lt;strong&gt;KEYWORD_SPIN&lt;/strong&gt; - Identifies keywords and then rotates each one&lt;/li&gt; &lt;li&gt;&lt;strong&gt;PREMIUM&lt;/strong&gt; - Includes variations with premium prices&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param string[] $tlds Top-level domains to be included in suggestions&lt;br/&gt;&lt;br/&gt; NOTE: These are sample values, there are many &lt;a href&#x3D;\&quot;http://www.godaddy.com/tlds/gtld.aspx#domain_search_form\&quot;&gt;more&lt;/a&gt; (optional)
     * @param int $length_max Maximum length of second-level domain (optional)
     * @param int $length_min Minimum length of second-level domain (optional)
     * @param int $limit Maximum number of suggestions to return (optional)
     * @param int $wait_ms Maximum amount of time, in milliseconds, to wait for responses If elapses, return the results compiled up to that point (optional, default to 1000)
     * @return Array of \GoDaddyDomainsClient\Model\DomainSuggestion[], HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function suggestWithHttpInfo($query, $x_shopper_id = null, $country = null, $city = null, $sources = null, $tlds = null, $length_max = null, $length_min = null, $limit = null, $wait_ms = null)
    {
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling suggest');
        }
        // parse inputs
        $resourcePath = "/v1/domains/suggest";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }
        // query params
        if (is_array($sources)) {
            $sources = $this->apiClient->getSerializer()->serializeCollection($sources, 'csv', true);
        }
        if ($sources !== null) {
            $queryParams['sources'] = $this->apiClient->getSerializer()->toQueryValue($sources);
        }
        // query params
        if (is_array($tlds)) {
            $tlds = $this->apiClient->getSerializer()->serializeCollection($tlds, 'csv', true);
        }
        if ($tlds !== null) {
            $queryParams['tlds'] = $this->apiClient->getSerializer()->toQueryValue($tlds);
        }
        // query params
        if ($length_max !== null) {
            $queryParams['lengthMax'] = $this->apiClient->getSerializer()->toQueryValue($length_max);
        }
        // query params
        if ($length_min !== null) {
            $queryParams['lengthMin'] = $this->apiClient->getSerializer()->toQueryValue($length_min);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($wait_ms !== null) {
            $queryParams['waitMs'] = $this->apiClient->getSerializer()->toQueryValue($wait_ms);
        }
        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DomainSuggestion[]',
                '/v1/domains/suggest'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DomainSuggestion[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DomainSuggestion[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation tlds
     *
     * Retrieves a list of TLDs supported and enabled for sale
     *
     * @return \GoDaddyDomainsClient\Model\TldSummary[]
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function tlds()
    {
        list($response) = $this->tldsWithHttpInfo();
        return $response;
    }

    /**
     * Operation tldsWithHttpInfo
     *
     * Retrieves a list of TLDs supported and enabled for sale
     *
     * @return Array of \GoDaddyDomainsClient\Model\TldSummary[], HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function tldsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v1/domains/tlds";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\TldSummary[]',
                '/v1/domains/tlds'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\TldSummary[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\TldSummary[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation transferIn
     *
     * Purchase and start or restart transfer process
     *
     * @param string $domain Domain to transfer in (required)
     * @param \GoDaddyDomainsClient\Model\DomainTransferIn $body Details for domain transfer purchase (required)
     * @param string $x_shopper_id The Shopper to whom the domain should be transfered (optional)
     * @return \GoDaddyDomainsClient\Model\DomainPurchaseResponse
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function transferIn($domain, $body, $x_shopper_id = null)
    {
        list($response) = $this->transferInWithHttpInfo($domain, $body, $x_shopper_id);
        return $response;
    }

    /**
     * Operation transferInWithHttpInfo
     *
     * Purchase and start or restart transfer process
     *
     * @param string $domain Domain to transfer in (required)
     * @param \GoDaddyDomainsClient\Model\DomainTransferIn $body Details for domain transfer purchase (required)
     * @param string $x_shopper_id The Shopper to whom the domain should be transfered (optional)
     * @return Array of \GoDaddyDomainsClient\Model\DomainPurchaseResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function transferInWithHttpInfo($domain, $body, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling transferIn');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling transferIn');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/transfer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GoDaddyDomainsClient\Model\DomainPurchaseResponse',
                '/v1/domains/{domain}/transfer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\GoDaddyDomainsClient\Model\DomainPurchaseResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\DomainPurchaseResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation update
     *
     * Update details for the specified Domain
     *
     * @param string $domain Domain whose details are to be updated (required)
     * @param \GoDaddyDomainsClient\Model\DomainUpdate $body Changes to apply to existing Domain (required)
     * @param string $x_shopper_id Shopper for whom Domain is to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return void
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function update($domain, $body, $x_shopper_id = null)
    {
        list($response) = $this->updateWithHttpInfo($domain, $body, $x_shopper_id);
        return $response;
    }

    /**
     * Operation updateWithHttpInfo
     *
     * Update details for the specified Domain
     *
     * @param string $domain Domain whose details are to be updated (required)
     * @param \GoDaddyDomainsClient\Model\DomainUpdate $body Changes to apply to existing Domain (required)
     * @param string $x_shopper_id Shopper for whom Domain is to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($domain, $body, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling update');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling update');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateContacts
     *
     * Update domain
     *
     * @param string $domain Domain whose Contacts are to be updated. (required)
     * @param \GoDaddyDomainsClient\Model\DomainContacts $contacts Changes to apply to existing Contacts (required)
     * @param string $x_shopper_id Shopper for whom domain contacts are to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return void
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function updateContacts($domain, $contacts, $x_shopper_id = null)
    {
        list($response) = $this->updateContactsWithHttpInfo($domain, $contacts, $x_shopper_id);
        return $response;
    }

    /**
     * Operation updateContactsWithHttpInfo
     *
     * Update domain
     *
     * @param string $domain Domain whose Contacts are to be updated. (required)
     * @param \GoDaddyDomainsClient\Model\DomainContacts $contacts Changes to apply to existing Contacts (required)
     * @param string $x_shopper_id Shopper for whom domain contacts are to be updated. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function updateContactsWithHttpInfo($domain, $contacts, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling updateContacts');
        }
        // verify the required parameter 'contacts' is set
        if ($contacts === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contacts when calling updateContacts');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/contacts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($contacts)) {
            $_tempBody = $contacts;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}/contacts'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation validate
     *
     * Validate the request body using the Domain Purchase Schema for the specified TLD
     *
     * @param \GoDaddyDomainsClient\Model\DomainPurchase $body An instance document expected to match the JSON schema returned by &#x60;./schema/{tld}&#x60; (required)
     * @return void
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function validate($body)
    {
        list($response) = $this->validateWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation validateWithHttpInfo
     *
     * Validate the request body using the Domain Purchase Schema for the specified TLD
     *
     * @param \GoDaddyDomainsClient\Model\DomainPurchase $body An instance document expected to match the JSON schema returned by &#x60;./schema/{tld}&#x60; (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function validateWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling validate');
        }
        // parse inputs
        $resourcePath = "/v1/domains/purchase/validate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/purchase/validate'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation verifyEmail
     *
     * Re-send Contact E-mail Verification for specified Domain
     *
     * @param string $domain Domain whose Contact E-mail should be verified. (required)
     * @param string $x_shopper_id Shopper for whom domain contact e-mail should be verified. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return void
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function verifyEmail($domain, $x_shopper_id = null)
    {
        list($response) = $this->verifyEmailWithHttpInfo($domain, $x_shopper_id);
        return $response;
    }

    /**
     * Operation verifyEmailWithHttpInfo
     *
     * Re-send Contact E-mail Verification for specified Domain
     *
     * @param string $domain Domain whose Contact E-mail should be verified. (required)
     * @param string $x_shopper_id Shopper for whom domain contact e-mail should be verified. NOTE: This is only required if you are a Reseller managing a domain purchased outside the scope of your reseller account. For instance, if you&#39;re a Reseller, but purchased a Domain via http://www.godaddy.com (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \GoDaddyDomainsClient\ApiException on non-2xx response
     */
    public function verifyEmailWithHttpInfo($domain, $x_shopper_id = null)
    {
        // verify the required parameter 'domain' is set
        if ($domain === null) {
            throw new \InvalidArgumentException('Missing the required parameter $domain when calling verifyEmail');
        }
        // parse inputs
        $resourcePath = "/v1/domains/{domain}/verifyRegistrantEmail";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/javascript', 'application/xml', 'text/javascript', 'text/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/xml','text/xml'));

        // header params
        if ($x_shopper_id !== null) {
            $headerParams['X-Shopper-Id'] = $this->apiClient->getSerializer()->toHeaderValue($x_shopper_id);
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                "{" . "domain" . "}",
                $this->apiClient->getSerializer()->toPathValue($domain),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v1/domains/{domain}/verifyRegistrantEmail'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GoDaddyDomainsClient\Model\ErrorLimit', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
